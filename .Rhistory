drugpair = drugnet_feature[drugnet_feature$TAG=='0',][c(1,2)]
}
names(drugpair) = c('A','B')
drugpair$A = capitalize(drugpair$A)
drugpair$B = capitalize(drugpair$B)
drugpair1 = drugpair[c(2,1)]
names(drugpair1) = c('A','B')
drugpair = rbind(drugpair, drugpair1)
#drugseeds = readline('Which drug are you interested in? ')
print('----- Preparaing Drug Seed -----')
for(i in 1:nrow(drugpair)){
drugseeds <- drugpair[i,1]
if(drugseeds %in% colnames(drugnet_adj)){
if(model == 'L1' | is.null(cellline)){
print('------ Level 1 Model ------')
seed_score = seedscore(seeds = drugseeds,
eta = eta)
D.N1 <- which(colnames(drugnet_adj) %chin% drugseeds)
D.N2 <- which(colnames(drugnet_adj) %chin% drugpair[i,2])
drugnet_adj1 = drugnet_adj
if(nrow( drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],])!=0){
drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],]$integrated_score2
drugnet_adj1[D.N2, D.N1] = drugnet_adj1[D.N1, D.N2]
}else if(nrow( drugnet_feature[drugnet_feature$A == drugpair[i,2] & drugnet_feature$B == drugseeds,])!=0){
drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugpair[i,2] & drugnet_feature$B == drugseeds,]$integrated_score2
drugnet_adj1[D.N2, D.N1] =drugnet_adj1[D.N1, D.N2]
}
dgTranMatrix <- TransitionMatrix(drugAdj = drugnet_adj1,
geneAdj = geneadj,
pathwayAdj = pathwayadj,
druggeneAdj = dgAdj,
genepathwayAdj=gpAdj,
drugpathwayAdj = drugpathwayMatrix,
x=x,
y=y,
z=z,
A=A,
B=B)
N.gene = nrow(geneadj)
N.drug = nrow(drugnet_adj)
#N.gene = nrow(dgTranMatrix) - nrow(drugnet_adj)
#N.drug = nrow(drugnet_adj)
# dgTranMatrix[is.na(dgTranMatrix)]=0
rwr_result = rwr(tm = dgTranMatrix,
r = r,
seeds_score = seed_score)
drugs_rank = rank_drugs(Num.Gene = N.gene,
Num.Drug = N.drug,
RWR.result = rwr_result,
Drug_seeds = drugseeds)
drugs_rank$rank = 1:nrow(drugs_rank)
genes_rank = rank_genes(Num.Gene = N.gene,
RWR.result = rwr_result)
pathways_rank <- rank_pathways(Num.Gene=N.gene,
Num.Drug=N.drug,
RWR.result=rwr_result)
print(paste0('The prediction result of drug name ',drugseeds,' has been saved!'))
}else if(model == 'L2' | (is.null(cellline)==FALSE)){
print('------ Level 2 Model ------')
if(is.null(essentialgene)){
seed_score = seedscore(seeds = drugseeds,
eta = eta)
D.N1 <- which(colnames(drugnet_adj) %chin% drugseeds)
D.N2 <- which(colnames(drugnet_adj) %chin% drugpair[i,2])
drugnet_adj1 = drugnet_adj
#drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],]$integrated_score2
#drugnet_adj1[D.N2, D.N1] = drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],]$integrated_score2
if(nrow( drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],])!=0){
drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],]$integrated_score2
drugnet_adj1[D.N2, D.N1] = drugnet_adj1[D.N1, D.N2]
}else if(nrow( drugnet_feature[drugnet_feature$A == drugpair[i,2] & drugnet_feature$B == drugseeds,])!=0){
drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugpair[i,2] & drugnet_feature$B == drugseeds,]$integrated_score2
drugnet_adj1[D.N2, D.N1] = drugnet_adj1[D.N1, D.N2]
}
dgTranMatrix <- TransitionMatrix(drugAdj = drugnet_adj1,
geneAdj = geneadj,
pathwayAdj = pathwayadj,
druggeneAdj = dgAdj,
genepathwayAdj=gpAdj,
drugpathwayAdj = drugpathwayMatrix,
x=x,
y=y,
z=z,
A=A,
B=B)
N.gene = nrow(geneadj)
N.drug = nrow(drugnet_adj)
rwr_result = rwr(tm = dgTranMatrix,
r = r,
seeds_score = seed_score)
drugs_rank = rank_drugs(Num.Gene = N.gene,
Num.Drug = N.drug,
RWR.result = rwr_result,
Drug_seeds = drugseeds)
drugs_rank$rank = 1:nrow(drugs_rank)
head(drugs_rank,20)
#                  genes_rank = rank_genes(Num.Gene = N.gene,
#                                          RWR.result = rwr_result)
#                  pathways_rank <- rank_pathways(Num.Gene=N.gene,
#                                                 Num.Drug=N.drug,
#                                                 RWR.result=rwr_result)
print(paste0('The prediction result of drug name ',drugseeds,' has been saved!'))
}else{
# essentialgene = essentialgene_maker(drugseeds=drugseeds, cell=cellline)
#essentialgene = essentialgene_maker(drugseeds=drugseed, cell=cellline, lambda=lambda,eta = eta)
if(drugseeds %in% colnames(drugnet_adj)){
seeds = c(drugseeds,essentialgene)
seed_score = seedscore(seeds = seeds,
eta = 0.7)
D.N1 <- which(colnames(drugnet_adj) %chin% drugseeds)
D.N2 <- which(colnames(drugnet_adj) %chin% drugpair[i,2])
drugnet_adj1 = drugnet_adj
#drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],]$integrated_score2
#drugnet_adj1[D.N2, D.N1] = drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],]$integrated_score2
if(nrow( drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],])!=0){
drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugseeds & drugnet_feature$B == drugpair[i,2],]$integrated_score2
drugnet_adj1[D.N2, D.N1] = drugnet_adj1[D.N1, D.N2]
}else if(nrow( drugnet_feature[drugnet_feature$A == drugpair[i,2] & drugnet_feature$B == drugseeds,])!=0){
drugnet_adj1[D.N1, D.N2] = drugnet_feature[drugnet_feature$A == drugpair[i,2] & drugnet_feature$B == drugseeds,]$integrated_score2
drugnet_adj1[D.N2, D.N1] = drugnet_adj1[D.N1, D.N2]
}
dgTranMatrix <- TransitionMatrix(drugAdj = drugnet_adj1,
geneAdj = geneadj,
pathwayAdj = pathwayadj,
druggeneAdj = dgAdj,
genepathwayAdj=gpAdj,
drugpathwayAdj = drugpathwayMatrix,
x=x,
y=y,
z=z,
A=A,
B=B)
N.gene = nrow(geneadj)
N.drug = nrow(drugnet_adj)
rwr_result = rwr(tm = dgTranMatrix,
r = r,
seeds_score = seed_score)
drugs_rank = rank_drugs(Num.Gene = N.gene,
Num.Drug = N.drug,
RWR.result = rwr_result,
Drug_seeds = drugseeds)
drugs_rank$rank = 1:nrow(drugs_rank)
#                  genes_rank = rank_genes(Num.Gene = N.gene,
#                                          RWR.result = rwr_result)
#                  pathways_rank <- rank_pathways(Num.Gene=N.gene,
#                                                 Num.Drug=N.drug,
#                                                 RWR.result=rwr_result)
print(paste0('The prediction result of drug name ',drugseeds,' has been saved!'))
}
}
}
#colnames(rwr_result) = drugseeds
write.csv(drugs_rank,paste0(resultdir,model,'_result/drugrank/',drugseeds,'_',drugpair[i,2],'_rank.csv'), row.names = F, quote = F)
#write.csv(genes_rank,paste0(resultdir,model,'_result/generank/',drugseeds,'_',drugpair[i,2],'_rank.csv'), row.names = F, quote = F)
#write.csv(rwr_result,paste0(resultdir,model,'_result/rwr_result/',drugseeds,'_',drugpair[i,2],'_rwr_result.csv'), row.names = T, quote = F)
#write.csv(pathways_rank,paste0(resultdir,model,'_result/pathwayrank/',drugseeds,'_rank.csv'), row.names = T, quote = F)
print(paste0('The prediction result of drug name ',drugseeds,' has been saved!'))
#return(drugs_rank)
}else{
print(paste0('The drug name ',drugseeds,' can not be found in the drug network! '))
}
}
#
# x=0.7
# y=0.7
# z=0
# A=0.7
# B=0.7
# C=0
# cellline = 'MCF7'
library(ROCR)
resultdir
resultdir = paste0('C:/Users/fengf/Documents/Veronica_files/DCcomboNet/Rpackage/wwin_LOOCV10/',cellline,'_model2/x_',x,'_y_',y,'_z_',z,'_a_',A,'_b_',B,'_c_',C,'/')
# resultdir = paste0('C:/Users/fengf/Documents/Veronica_files/DCcomboNet/Rpackage/wwin_LOOCV4/L1_model/x_',x,'_y_',y,'_z_',z,'_a_',A,'_b_',B,'_c_',C,'/')
# model='L1'
dir.create(paste0(resultdir,model,'_result/ROC/'))
a <- list.files(paste0(resultdir,model,'_result/drugrank/'))
dir <-paste0(resultdir,model,'_result/drugrank/',a)
n <- length(dir);n
b = gsub('_rank.csv','',a)
A_B = data.table(b)
drugpair_positive = data.frame(A_B[,c('A','B') := tstrsplit(b,'_',fix = T)][])[c('A','B')]
names(drugpair_positive) = c('drugseed','DrugID')
drugpair_positive$Pred2 = rep(1,nrow(drugpair_positive))
drugpair = strsplit(b[1],'_')[[1]]
drugrank <- read.csv(file = dir[1],header=T, stringsAsFactors = F)
drugseed = drugpair[1]; drug.pred = drugpair[2]
drugrank$drugseed = drugseed
drugrank$Pred1 = rep(0,nrow(drugrank))
drugrank$Pred2 = rep(0,nrow(drugrank))
drugrank[which(drugrank$DrugID == drug.pred),]$Pred1 = 1
m = drugpair_positive[which(drugpair_positive$drugseed == drugseed),2]
if(length(m)>1){for(i in 1:length(m)){
drugrank[which(drugrank$DrugID == m[i]),]$Pred2 = 1
}}else if(m == 1){
drugrank[which(drugrank$DrugID == m),]$Pred2 = 1
}
for(i in 2:n){
#i = 2
drugpair = strsplit(b[i],'_')[[1]]
drugrank2 <- read.csv(file = dir[i],header=T, stringsAsFactors = F)
drugseed = drugpair[1]; drug.pred = drugpair[2]
drugrank2$drugseed = drugseed
drugrank2$Pred1 = rep(0,nrow(drugrank2))
drugrank2$Pred2 = rep(0,nrow(drugrank2))
drugrank2[which(drugrank2$DrugID == drug.pred),]$Pred1 = 1
tmp = drugpair_positive[which(drugpair_positive$drugseed == drugseed),2]
for(j in 1:length(tmp)){
if(length(intersect(drugrank2$DrugID,tmp[j]))!=0){
drugrank2[which(drugrank2$DrugID == tmp[j]),]$Pred2 = 1
}
}
drugrank = rbind(drugrank, drugrank2)
}
drugrank = drugrank[c(4,1,2,3,5,6)]
#write.csv(drugrank,paste0(resultdir,model,'_result/alldrugrank2.csv'),row.names  = F)
drugrank = unique(drugrank[(drugrank$Pred1 == 0 & drugrank$Pred2 != 1)|drugrank$Pred1 == 1,])
pred <- prediction( drugrank$Score, drugrank$Pred1)
perf <- performance( pred, 'tpr', 'fpr' )
aucPerf <- performance( pred, 'auc' )
AUCValue<-aucPerf@y.values[[1]]
AucValue<-round(AUCValue,3)
print(paste('x',x,'y',y,'A',A,'B',B,AucValue))
CDK_FP  <- read.csv(paste0(load_dir,'test/OCILY3_data/structure_sim/fingerprint.csv'), sep = ',',header = T, stringsAsFactors = F)
# 1. Make sure the path of `data` folder assign to variable correctly
## Here is an example path, you should switch to your own
load_dir = "G:/lab/DCcomboNet/Rpackage/input_data/"
CDK_FP  <- read.csv(paste0(load_dir,'test/OCILY3_data/structure_sim/fingerprint.csv'), sep = ',',header = T, stringsAsFactors = F)
HEAD(CDK_FP[,1:5])
head(CDK_FP[,1:5])
devtools::document()
devtools::check()
devtools::check()
library(DComboNet)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
Sys.which(Sys.getenv("R_QPDF","qpdf"))
Sys.which(Sys.getenv("R_QPDF","qpdf"))
devtools::check()
load_dir = "G:/lab/DCcomboNet/Rpackage/input_data/"
resultdir = "G:/lab/DCcomboNet/Rpackage/tryout_result/"
drugcandidate = data.frame(drug = "Sorafenib", drug = "DB00398")
manual_input = FALSE
drugtarget = NULL #read.table(paste0(load_dir,'data/drugtarget.csv'), sep =  ',',header = TRUE, stringsAsFactors = FALSE)
druggene = NULL
model = "L2"
manual_input = FALSE
drugnetWeight = TRUE
featuretype = 'integrated_score'
dataset = "92742"
cellline = "HEPG2"
treatment_time = 6
foldchange_DEG = 0.5
pvalue_DEG = 0.05
foldchange_DEP = 0
pvalue_DEP = 0.05
CDK_FP = NULL
pubchemFP = NULL
MACCS_FP = NULL
drugtarget = NUL
drugtarget = NULL
druggene = NULL
dtweight = 2
dgweight = 1
dDEGweight = 1
dgpweight = 1
dDEpweight = 1
gpweight=1
drugDEG = NULL
drugDEP = NULL
cancergene = NULL
x = 0.5
y = 0.5
z = 0
A = 0.5
B = 0.5
eta = 1
r = 0.7
library(DComboNet)
library(igraph)
library(data.table)
library(compiler)
library(Matrix)
library(Hmisc)
library(reshape2)
library(Hmisc)
dir.create(resultdir)
dir.create(paste0(resultdir,model,'_result/'))
dir.create(paste0(resultdir,model,'_result/drugrank'))
dir.create(paste0(resultdir,model,'_result/generank'))
dir.create(paste0(resultdir,model,'_result/pathwayrank'))
dir.create(paste0(resultdir,model,'_result/potential_net'))
#drugseeds = readline('Which drug are you interested in? ')
#Loading functions
source(paste0(load_dir,'/DComboNet/R/DEG_DEpathway_preparation.R'))
source(paste0(load_dir,'/DComboNet/R/DrugNetFeatures.R'))
source(paste0(load_dir,'/DComboNet/R/DrugNet.R'))
source(paste0(load_dir,'/DComboNet/R/DrugGeneNet.R'))
source(paste0(load_dir,'/DComboNet/R/GeneNet.R'))
source(paste0(load_dir,'/DComboNet/R/DrugPathwayNet.R'))
source(paste0(load_dir,'/DComboNet/R/PathwayNet.R'))
source(paste0(load_dir,'/DComboNet/R/GenePathwayNet.R'))
source(paste0(load_dir,'/DComboNet/R/DrugGeneHeteroNet.R'))
source(paste0(load_dir,'/DComboNet/R/RWR_fun.R'))
source(paste0(load_dir,'/DComboNet/R/SeedsPreparation.R'))
source(paste0(load_dir,'/DComboNet/R/Results_rank.R'))
c.DrugNetFeature = compiler::cmpfun(DrugNetFeature)
c.geneNet = compiler::cmpfun(geneNet)
c.geneNet.Adj= compiler::cmpfun(geneNet.Adj)
c.drugGeneNet.L1= compiler::cmpfun(drugGeneNet.L1)
c.drugGeneNet.L2= compiler::cmpfun(drugGeneNet.L2)
c.transitionMatrix = compiler::cmpfun(TransitionMatrix)
druglistlib = read.csv(paste0(load_dir,'data/druglist.csv'),stringsAsFactors = F)
if(is.null(drugcandidate) |length(setdiff(drugcandidate[,1], druglistlib[,1])) == 0 ){
if(model == 'L1' | is.null(cellline)){
if(file.exists(paste0(load_dir,'drug_net/features.csv'))){
print('       The drug network features has been found in Pre-calculated L1 model       ')
drugnet_feature = read.csv(paste0(load_dir,'drug_net/features.csv'))
}else{
drugnet_feature = c.DrugNetFeature(druglist = drugcandidate,
model = model,
cellline = cellline,
CDK_FP = CDK_FP,
pubchemFP = pubchemFP,
MACCS_FP = MACCS_FP,
load_dir = load_dir)
}
}else if(model == 'L2' | (is.null(cellline)==FALSE)){
if(file.exists(paste0(load_dir,'drug_net/features_',cellline,'.csv'))){
print(paste0('       The drug network for ',cellline,' features has been found in Pre-calculated L2 model       '))
drugnet_feature = read.csv(paste0(load_dir,'drug_net/features_',cellline,'.csv'))
}else{
drugnet_feature = c.DrugNetFeature(druglist = drugcandidate,
model = model,
cellline = cellline,
CDK_FP = CDK_FP,
pubchemFP = pubchemFP,
MACCS_FP = MACCS_FP,
load_dir = load_dir)
}
}
}else{
drugnet_feature = c.DrugNetFeature(druglist = drugcandidate,
model = model,
cellline = cellline,
CDK_FP = CDK_FP,
pubchemFP = pubchemFP,
MACCS_FP = MACCS_FP,
load_dir = load_dir)
}
drugnet_feature = drugnet_feature[drugnet_feature$integrated_score2 >=0.2,]
#timeend<-Sys.time()
#runningtime<-timeend-timestart
#print(runningtime)
# cost about 6.968375 mins
print('----- Drug Net Features Calculation Finished -----')
print(' ')
print('----- Drug Net Adjacency Matrix Generating -----')
drugnet_adj = AdjMatrix_drugs(x = drugnet_feature,
weighted = drugnetWeight,
weight.type = featuretype)
if(model == 'L1' | is.null(cellline)){
gene.net <- c.geneNet(dt= drugtarget,
dg = druggene,
dDEG = drugDEG,
cellline = cellline,
cancer_gene = cancergene,
load_dir = load_dir)
}else if(model == 'L2' | (is.null(cellline)==FALSE)){
gene.net <- c.geneNet(dt= drugtarget,
dg = druggene,
dDEG = drugDEG,
dataset = dataset,
cellline = cellline,
treatment_time = treatment_time,
cancer_gene = cancergene,
load_dir = load_dir)
}
print('-----  Gene Net Adjacency Matrix Generating -----')
print(' ')
geneadj <- c.geneNet.Adj(GeneNetwork = gene.net)
print('----- Drug Gene Adjacency Matrix Generating -----')
if(model == 'L1' | is.null(cellline)){
print('------ Creating Drug Gene Adjacency Matrix for Level 1 Model ------')
dgAdj = drugGeneNet.L1(dt = drugtarget,
dg = druggene,
drugAdj = drugnet_adj,
geneNet = gene.net,
dtweight = dtweight,
dgweight = dgweight,
load_dir = load_dir)
}else if(model == 'L2' | (is.null(cellline)==FALSE)){
print('------ Creating Drug Gene Adjacency Matrix for Level 2 Model ------')
dgAdj = drugGeneNet.L2(dt = drugtarget,
dg = druggene,
dDEG = drugDEG,
drugAdj = drugnet_adj,
geneNet = gene.net,
dataset = dataset,
cellline = cellline,
treatment_time = treatment_time,
dtweight = dtweight,
dgweight = dgweight,
dDEGweight = dDEGweight,
load_dir = load_dir)
}
WWI_all <- read.csv(paste0(load_dir,'pathway/WWI.txt'), sep = '\t', header =T, stringsAsFactors = F)
print('----- Pathway Adjacency Matrix Generating -----')
pathwayadj = pathwayNet.Adj(PathwayNetwork = WWI_all[c(1,2)])
# Drug_Pathway_Matrix
print('----- Drug Pathway Adjacency Matrix Generating -----')
if(model == 'L1' | is.null(cellline)){
print('------ Creating Drug Pathway Adjacency Matrix for Level 1 Model ------')
drugpathwayMatrix <- DrugPathwayMatrix.L1(dt = drugtarget,
dg = druggene,
drugAdj = drugnet_adj,
dgpweight = dgpweight,
PathwayNetwork = WWI_all,
load_dir = load_dir)
}else if(model == 'L2' | (is.null(cellline)==FALSE)){
print('------ Creating Drug Pathway Adjacency Matrix for Level 2 Model ------')
drugpathwayMatrix <- DrugPathwayMatrix.L2(dt = drugtarget,
dDEG = drugDEG,
dataset=dataset,
cellline = cellline,
treatment_time=treatment_time,
drugDEP = drugDEP,
drugAdj = drugnet_adj,
dDEpweight = dDEpweight,
PathwayNetwork = WWI_all,
load_dir = load_dir)
}
# genepathwayMatrix
gpAdj = genepathwayAdj(drugAdj = drugnet_adj,
pathwayadj = pathwayadj,
geneadj = geneadj,
gpweight = gpweight,
load_dir = load_dir)
drugAdj = drugnet_adj
geneAdj = geneadj
pathwayAdj = pathwayadj
druggeneAdj = dgAdj
genepathwayAdj = gpAdj
drugpathwayAdj = drugpathwayMatrix
M = nrow(drugAdj)
N = nrow(geneAdj)
Transition_Gene_Drugs <- Matrix::Matrix(0,nrow=N,ncol=M,sparse = TRUE)
colnames(Transition_Gene_Drugs) <- colnames(druggeneAdj)
row.names(Transition_Gene_Drugs) <- row.names(druggeneAdj)
Col_Sum_Bipartite <- Matrix::colSums(druggeneAdj, na.rm = FALSE, dims = 1)#, sparseResult = FALSE)
for(j in 1:M){
if(Col_Sum_Bipartite[j] != 0){
Transition_Gene_Drugs[,j] <- (x * druggeneAdj[,j] /Col_Sum_Bipartite[j])
}else if(Col_Sum_Bipartite[j] == 0){
Transition_Gene_Drugs[,j] <- 0
}
}
#write.csv(as.matrix(Transition_Gene_Drugs,'Output_Files/test.file/Transition_Gene_Drugs.csv')
Transition_Drugs_Gene <- Matrix::Matrix(0,nrow=M,ncol=N,sparse = TRUE)
colnames(Transition_Drugs_Gene) <- rownames(druggeneAdj)
rownames(Transition_Drugs_Gene) <- colnames(druggeneAdj)
Row_Sum_Bipartite <- Matrix::rowSums(druggeneAdj, na.rm = FALSE, dims = 1)#, sparseResult = FALSE)
for(i in 1:N){
if(Row_Sum_Bipartite[i] != 0){
Transition_Drugs_Gene[,i] <- (x * druggeneAdj[i,] /Row_Sum_Bipartite[i])
}else if(Row_Sum_Bipartite[i] == 0){
Transition_Drugs_Gene[,i] <- 0
}
}
Transition_Gene_Drugs[1:5:1:5]
Transition_Gene_Drugs
as.matrix(Transition_Drugs_Gene)[1:5,1:5]
as.matrix(Transition_Gene_Drugs)[1:5,1:5]
as.matrix(Transition_Drugs_Gene)[1:10,1:10]
as.matrix(Transition_Gene_Drugs)[1:10,1:10]
colSums(druggeneAdj)[1:5]
rowSums(druggeneAdj)[1:5]
#geneAdj = pathwayadj
M = nrow(drugAdj)
L = nrow(pathwayAdj)
Transition_Pathway_Drugs <- Matrix::Matrix(0,nrow=L,ncol=M,sparse = TRUE)
colnames(Transition_Pathway_Drugs) <- colnames(drugpathwayAdj)
row.names(Transition_Pathway_Drugs) <- row.names(drugpathwayAdj)
Col_Sum_Bipartite <- Matrix::colSums(drugpathwayAdj, na.rm = FALSE, dims = 1)
for(j in 1:M){
if(Col_Sum_Bipartite[j] != 0){
Transition_Pathway_Drugs[,j] <- (y*drugpathwayAdj[,j] /Col_Sum_Bipartite[j])
}else if(Col_Sum_Bipartite[j] == 0){
Transition_Pathway_Drugs[,j] <- 0
}
}
#write.csv(as.matrix(Transition_Gene_Drugs,'Output_Files/test.file/Transition_Gene_Drugs.csv')
Transition_Drugs_Pathway <- Matrix::Matrix(0,nrow=M,ncol=L,sparse = TRUE)
colnames(Transition_Drugs_Pathway) <- row.names(drugpathwayAdj)
row.names(Transition_Drugs_Pathway) <- colnames(drugpathwayAdj)
Row_Sum_Bipartite <- Matrix::rowSums(drugpathwayAdj, na.rm = FALSE, dims = 1)#, sparseResult = FALSE)
for(i in 1:L){
if(Row_Sum_Bipartite[i] != 0){
Transition_Drugs_Pathway[,i] <- (y*drugpathwayAdj[i,] /Row_Sum_Bipartite[i])
}else if(Row_Sum_Bipartite[i] == 0){
Transition_Drugs_Pathway[,i] <- 0
}
}
as.matrix(Transition_Pathway_Drugs)[1:10,1:10]
as.matrix(Transition_Drugs_Pathway)[1:10,1:10]
length(rowSums(druggeneAdj))
length(colSums(genepathwayAdj))
head(rowSums(druggeneAdj))
library(DComboNet)
sessionInfo()
